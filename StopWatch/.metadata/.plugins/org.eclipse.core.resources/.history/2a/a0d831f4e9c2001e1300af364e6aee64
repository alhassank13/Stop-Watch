/*
 * StopWatch.c
 *
 *  Created on: Feb 2, 2024
 *      Author: ALHassan Khaled
 */



#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>




/**>>>>>>>>>>>>>>>>>>>			FUNCTION PROTOTYPE			<<<<<<<<<<<<<<<<<<<<**/
void INT0_Init(void);
void INT1_Init(void);
void INT2_Init(void);
void Timer1_Init(void);
void UpdateStopWatchDigits(void);
void Display(void);




/**>>>>>>>>>>>>>>>>>>>			GLOBALE VARIABLRS			<<<<<<<<<<<<<<<<<<<<**/
unsigned int g_num = 0;
char g_flage = 0;
/*
 no_seconds_digit1 = clock[0]
 no_seconds_digit2 = clock[1]
 no_minutes_digit1 = clock[2]
 no_minutes_digit2 = clock[3]
 no_hours_digit1 = clock[4]
 no_hours_digit2 = clock[5]
 */
char g_clock[6];

/**>>>>>>>>>>>>>>>>>>>			START MAIN			<<<<<<<<<<<<<<<<<<<<**/
int main(void){
	/**VARIABLES**/

	/**>>>>>>>>>>>>>>>>>>>			START CONFIGRATION			<<<<<<<<<<<<<<<<<<<<**/

	/**7 Segments Configuration**/
	DDRA |= 0x3F;   /*Configure first 6 pins in PORTA  as OUTPUT*/
	DDRC |= 0x0F;	/*Configure first four pins of PORTC as output pins */


	PORTA |= 0x01;  //with these bits,I can control (6 digits 7-segment) to choose which digit will take the output of 7447 decoder

	PORTC = 0;      /*Initialize the six 7-segments with value 0 by clear the first four bits in PORTC*/


	/** Enable global interrupt flag (I-bit) in the Status Register (SREG)**/
	SREG |= (1 << 7);

	//	/** Buttons Configuration**/
	//
	//	/*Configure PIN2 and PIN3  in PORTD as INPUT*/
	//	/*PIN2(INT0  =>  reset)*/
	//	/*PIN3(INT1  =>  paused)*/
	//	DDRD &= ~(1<<PD2) &~(1<<PD3);
	//
	//	/*Configure PIN2 in PORTB as INPUT*/
	//	/*PIN2(INT2  =>  resumed)*/
	//	DDRB &= ~(1<<PB2);
	//
	//
	//	PORTD |= (1<<PD2);		/* Make the internal pull-up resistor for PIN2 in PORTD ON*/
	//	PORTB |= (1<<PB2);		/* Make the internal pull-up resistor for PIN2 in PORTB ON*/

	/**>>>>>>>>>>>>>>>>>>>			END CONFIGRATION			<<<<<<<<<<<<<<<<<<<<**/

	/**Timer1 Initialization**/
	Timer1_Init();
	/**INTERRUPT Initialization**/
	INT0_Init();
	INT1_Init();
	INT2_Init();



	while(1){

		Display();
		if(timer1_interrupt_flag==set){
			update_stop_watch_digits();
			timer1_interrupt_flag=cleared;
		}

		//		_delay_ms(700);
		//		// check if overflow occurs at the 7-segment as its maximum count is 9
		//		if((PORTC & 0x0F) == 9)
		//		{
		//			g_num = 0;
		//			PORTC = (PORTC & 0xF0) | (g_num & 0x0F);
		//			PORTA |= (1<<PA0);
		//			_delay_ms(10);
		//			PORTC = (PORTC & 0xF0) | (g_num & 0x0F);
		//
		//			PORTA &= ~(1<<PA1);
		//			_delay_ms(10);
		//			PORTA &= ~(1<<PA2);
		//			_delay_ms(10);
		//			PORTA &= ~(1<<PA3);
		//			_delay_ms(10);
		//			PORTA &= ~(1<<PA4);
		//			_delay_ms(10);
		//			PORTA &= ~(1<<PA5);
		//			_delay_ms(10);
		//			PORTA &= ~(1<<PA6);
		//			_delay_ms(10);
		//
		//		}
		//		else
		//		{
		//			g_num++;
		//			PORTC = (PORTC & 0xF0) | (g_num & 0x0F);
		//			PORTA |= (1<<PA0);
		//			_delay_ms(10);
		//			PORTA &= ~(1<<PA1);
		//			_delay_ms(10);
		//			PORTA &= ~(1<<PA2);
		//			_delay_ms(10);
		//			PORTA &= ~(1<<PA3);
		//			_delay_ms(10);
		//			PORTA &= ~(1<<PA4);
		//			_delay_ms(10);
		//			PORTA &= ~(1<<PA5);
		//			_delay_ms(10);
		//			PORTA &= ~(1<<PA6);
		//			_delay_ms(10);
		//
		//		}
		DisplayNumber(g_num % 100);

		// Example: Display stopwatch value on 7-segments
		PORTA = (PORTA & 0xC0) | ((g_num / 100) & 0x3F);

		//				if(g_flage == 1){
		//
		//					while((PINB&(1<<PB2)) && (PIND&(1<<PD2)) ){
		//
		//						PORTC = (PORTC & 0xF0) | (g_num & 0x0F);
		//
		//					}
		//					g_flage=0;
		//				}
		//
		//		if(g_flage == 2){
		//			g_num = 0;
		//			PORTC = (PORTC & 0xF0) | (g_num & 0x0F);
		////			break;
		//		}
		//
		//		if(g_flage == 0){
		////			g_num ++;
		//			PORTC = (PORTC & 0xF0) | (g_num & 0x0F);
		////			break;
		//		}




	}/**END WHILE**/
}/**END MAIN**/


/**>>>>>>>>>>>>>>>>>>>			FUNCTION DEFINTION			<<<<<<<<<<<<<<<<<<<<**/
// Function to initialize external interrupt INT0
void INT0_Init(void){
	// Configure PD2 as input (INT0 pin)
	DDRD &= ~(1 << PD2);

	//enable internal pull up
	PORTD|=(1<<PD2);

	// Configure interrupt sense control bits for falling edge trigger (ISC01 = 1, ISC00 = 0)
	MCUCR |= (1 << ISC01);

	// Enable external interrupt INT0
	GICR |= (1 << INT0);

	// Enable global interrupt flag (I-bit) in the Status Register (SREG)
	//	SREG |= (1 << 7);
}

// Function to initialize external interrupt INT1
void INT1_Init(void){
	// Configure PD3 as input (INT1 pin)
	DDRD &= ~(1 << PD3);

	// Configure interrupt sense control bits for rising edge trigger (ISC10 = 1, ISC11 = 1)
	MCUCR |= (1 << ISC10) | (1 << ISC11);

	// Enable external interrupt INT1
	GICR |= (1 << INT1);

	// Enable global interrupt flag (I-bit) in the Status Register (SREG)
	//	SREG |= (1 << 7);
}

// Function to initialize external interrupt INT2
void INT2_Init(void){
	//input pin
	DDRB &=~(1<<PB2);

	//enable internal pull up
	PORTB=(1<<PB2);

	// Configure interrupt sense control bit for falling edge trigger for INT2
	MCUCSR &= ~(1 << ISC2);

	// Enable external interrupt INT2
	GICR |= (1 << INT2);

	// Enable global interrupt flag (I-bit) in the Status Register (SREG)
	//	SREG |= (1 << 7);
}

/** Function to configure and initialize Timer1 for CTC mode **/
void Timer1_Init(void) {
	TCNT1 = 0;//Initial value
	/*
			 prescaler=1024
			 F_CPU=1 MHz
			 F_timer=1 kHz
			 T_timer=1 msec
			 for one second i will put compare value to 1000
			 so interrupt happen every 1*1000 = 1000 msec =1 sec
	 */
	OCR1A = 1000;  //compare value
	TIMSK|=(1<<OCIE1A); //Timer Output Compare A match interrupt is enabled

	/* Configure timer control register TCCR1A
			 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
			 2. FOC1A=1 FOC1B=0
			 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
	 */
	TCCR1A = (1<<FOC1A);

	/* Configure timer control register TCCR1B
	 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
	 * 2. Prescaler = F_CPU/1024 CS10=1 CS11=0 CS12=1
	 */

	TCCR1B=(1<<CS10)|(1<<CS12); //prescaler=1024
	TCCR1B|=(1<<WGM12); //CTC mode
}




void UpdateStopWatchDigits(void){
	g_clock[0]; //every timer1 interrupt (every second) increase seconds
	if(g_clock[0]==10){
		g_clock[0]=0;
		g_clock[1]++;
		if(g_clock[1]==6 && g_clock[0]==0){
			g_clock[1]=0;
			g_clock[2]++;
		}
	}
	if(g_clock[2]==10){
		g_clock[2]=0;
		g_clock[3]++;
		if(g_clock[3]==6 && g_clock[2]==0){
			g_clock[3]=0;
			g_clock[4]++;
		}
	}
	if(g_clock[4]==10){
		g_clock[4]=0;
		g_clock[5]++;
		if(g_clock[5]==10 && g_clock[4]==0){
			//here we will reach our maximum  stop watch(99hours:59minutes:59seconds),no enough bits for hours
			//so i will reset stop watch
			for(int i=0;i<6;i++){
				g_clock[i]=0;
			}
			TCNT1=0; //make Timer register startng from zero
		}
	}
}

void Display(){
	/*
     Loop through each digit, change the value of PORTC based on the current digit.
     As the loop runs very fast, the display appears continuous to the human eye.
	 */
	int digit;
	for (digit = 0; digit < 6; digit++) {
		// Select the current digit by shifting a '1' to the left
		PORTA = 1 << digit;

		// Display the corresponding value for the current digit on PORTC
		PORTC = g_clock[digit];

		// Introduce a short delay for visibility
		_delay_ms(10);
	}
}






///ISR Reset
ISR(INT0_vect){
	SREG|=(1<<7);//enable interrupts nesting
	//RESET stop watch
	for(int i=0;i<6;i++){
		g_clock[i]=0;
	}
	TCNT1=0;
}

///ISR paused
ISR(INT1_vect){
	SREG|=(1<<7);//enable interrupts nesting
	//pause stop watch ,we can do this by stop timer1 (no clock source)
	TCCR1B &= ~(1<<CS12);
	TCCR1B &= ~(1<<CS11);
	TCCR1B &= ~(1<<CS10);

}


///ISR resumed
ISR(INT2_vect){
	SREG|=(1<<7);//enable interrupts nesting
	//resume stop watch ,we can do this by reactive timer1 (connect to clock source again)
	//enable _clock with prescaler=1024
	TCCR1B|=(1<<CS10);
	TCCR1B|=(1<<CS12);
}

/** Timer1 CTC Interrupt Service Routine **/
ISR(TIMER1_COMPA_vect) {
	if (!paused) {
		g_num++;
	}
}
